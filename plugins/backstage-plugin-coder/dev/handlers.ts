import { rest } from 'msw';

export const handlers = [
  rest.get(
    'http://localhost:7007/api/proxy/coder/api/v2/users/me',
    (_, res, ctx) =>
      res(
        ctx.json({
          id: '1',
          username: 'guest',
          email: 'guest@email.com',
          created_at: '2025-09-14T12:16:27.321632+02:00',
          updated_at: '2025-09-14T12:29:11.028088+02:00',
          last_seen_at: '2025-09-14T10:29:11.028088Z',
          status: 'active',
          login_type: 'password',
          organization_ids: ['1'],
          roles: [
            {
              name: 'owner',
              display_name: 'Owner',
            },
          ],
        }),
      ),
  ),
  rest.get(
    'http://localhost:7007/api/proxy/coder/api/v2/workspaces',
    (_, res, ctx) =>
      res(
        ctx.json({
          workspaces: [
            {
              id: '1',
              created_at: '2025-09-14T12:51:00.047143+02:00',
              updated_at: '2025-09-14T12:51:00.047143+02:00',
              owner_id: '1',
              owner_name: 'guest',
              owner_avatar_url: '',
              organization_id: '1',
              organization_name: 'guest',
              template_id: '1',
              template_name: 'docker',
              template_display_name: 'Docker Containers',
              template_icon: '/icon/docker.png',
              template_allow_user_cancel_workspace_jobs: false,
              template_active_version_id: '1',
              template_require_active_version: false,
              template_use_classic_parameter_flow: false,
              latest_build: {
                id: '1',
                created_at: '2025-09-14T12:51:00.094591+02:00',
                updated_at: '2025-09-14T12:51:46.971419+02:00',
                workspace_id: '1',
                workspace_name: 'Docker',
                workspace_owner_id: '1',
                workspace_owner_name: 'guest',
                template_version_id: '1',
                template_version_name: 'brave_cerf2',
                build_number: 1,
                transition: 'start',
                initiator_id: '1',
                initiator_name: 'guest',
                job: {
                  id: '1',
                  created_at: '2025-09-14T12:51:00.094591+02:00',
                  started_at: '2025-09-14T12:51:00.102009+02:00',
                  completed_at: '2025-09-14T12:51:46.971419+02:00',
                  status: 'succeeded',
                  worker_id: '1',
                  file_id: '1',
                  tags: {
                    owner: '',
                    scope: 'organization',
                  },
                  queue_position: 0,
                  queue_size: 0,
                  organization_id: '1',
                  input: {
                    workspace_build_id: '1',
                  },
                  type: 'workspace_build',
                  metadata: {
                    template_version_name: '',
                    template_id: '00000000-0000-0000-0000-000000000000',
                    template_name: '',
                    template_display_name: '',
                    template_icon: '',
                  },
                  logs_overflowed: false,
                },
                reason: 'initiator',
                resources: [
                  {
                    id: '1',
                    created_at: '2025-09-14T12:51:46.976346+02:00',
                    job_id: '1',
                    workspace_transition: 'start',
                    type: 'docker_container',
                    name: 'workspace',
                    hide: false,
                    icon: '',
                    agents: [
                      {
                        id: '1',
                        parent_id: null,
                        created_at: '2025-09-14T12:51:46.97677+02:00',
                        updated_at: '2025-09-14T13:42:40.536308+02:00',
                        first_connected_at: '2025-09-14T12:52:57.954518+02:00',
                        last_connected_at: '2025-09-14T13:42:40.536302+02:00',
                        started_at: '2025-09-14T12:52:58.617698+02:00',
                        ready_at: '2025-09-14T12:53:12.012252+02:00',
                        status: 'connected',
                        lifecycle_state: 'ready',
                        name: 'main',
                        resource_id: '1',
                        architecture: 'arm64',
                        environment_variables: {
                          GIT_AUTHOR_EMAIL: 'guest@email.com',
                          GIT_AUTHOR_NAME: 'default',
                          GIT_COMMITTER_EMAIL: 'guest@email.com',
                          GIT_COMMITTER_NAME: 'default',
                        },
                        operating_system: 'linux',
                        logs_length: 7516,
                        logs_overflowed: false,
                        version: 'v2.26.0+a056cb6',
                        api_version: '2.6',
                        apps: [
                          {
                            id: '1',
                            url: 'http://localhost:13337/',
                            external: false,
                            slug: 'code-server',
                            display_name: 'code-server',
                            icon: '/icon/code.svg',
                            subdomain: false,
                            sharing_level: 'owner',
                            healthcheck: {
                              url: 'http://localhost:13337/healthz',
                              interval: 5,
                              threshold: 6,
                            },
                            health: 'healthy',
                            hidden: false,
                            open_in: 'slim-window',
                            statuses: [],
                          },
                          {
                            id: '1',
                            url: 'jetbrains-gateway://connect#type=coder\u0026workspace=Docker\u0026owner=camilaibs\u0026folder=/home/coder\u0026url=https://kk0rnnftnd4t8.pit-1.try.coder.app\u0026token=$SESSION_TOKEN\u0026ide_product_code=IU\u0026ide_build_number=243.21565.193\u0026ide_download_link=https://download.jetbrains.com/idea/ideaIU-2024.3.tar.gz\u0026agent_id=1',
                            external: true,
                            slug: 'gateway',
                            display_name: 'IntelliJ IDEA Ultimate',
                            icon: '/icon/intellij.svg',
                            subdomain: false,
                            sharing_level: 'owner',
                            healthcheck: {
                              url: '',
                              interval: 0,
                              threshold: 0,
                            },
                            health: 'disabled',
                            hidden: false,
                            open_in: 'slim-window',
                            statuses: [],
                          },
                        ],
                        latency: {
                          'Coder Embedded Relay': {
                            preferred: true,
                            latency_ms: 219.866583,
                          },
                        },
                        connection_timeout_seconds: 120,
                        troubleshooting_url:
                          'https://coder.com/docs/admin/templates/troubleshooting',
                        subsystems: [],
                        health: {
                          healthy: true,
                        },
                        display_apps: [
                          'vscode',
                          'ssh_helper',
                          'port_forwarding_helper',
                          'web_terminal',
                        ],
                        log_sources: [
                          {
                            workspace_agent_id: '1',
                            id: '1',
                            created_at: '2025-09-14T12:51:46.980692+02:00',
                            display_name: 'Startup Script',
                            icon: '/emojis/25b6-fe0f.png',
                          },
                          {
                            workspace_agent_id: '1',
                            id: '1',
                            created_at: '2025-09-14T12:51:46.980692+02:00',
                            display_name: 'code-server',
                            icon: '/icon/code.svg',
                          },
                        ],
                        scripts: [
                          {
                            id: '1',
                            log_source_id: '1',
                            log_path: 'coder-startup-script.log',
                            script:
                              'set -e\n\n# Prepare user home with default files on first start.\nif [ ! -f ~/.init_done ]; then\n  cp -rT /etc/skel ~\n  touch ~/.init_done\nfi\n\n# Add any commands that should be executed at workspace startup (e.g install requirements, start a program, etc) here\n',
                            cron: '',
                            run_on_start: true,
                            run_on_stop: false,
                            start_blocks_login: false,
                            timeout: 0,
                            display_name: 'Startup Script',
                          },
                          {
                            id: '1',
                            log_source_id: '1',
                            log_path: '',
                            script:
                              '#!/usr/bin/env bash\n\nEXTENSIONS=("")\nBOLD=\'\\033[0;1m\'\nCODE=\'\\033[36;40;1m\'\nRESET=\'\\033[0m\'\nCODE_SERVER="/tmp/code-server/bin/code-server"\n\n# Set extension directory\nEXTENSION_ARG=""\nif [ -n "" ]; then\n  EXTENSION_ARG="--extensions-dir="\n  mkdir -p ""\nfi\n\nfunction run_code_server() {\n  echo "👷 Running code-server in the background..."\n  echo "Check logs at /tmp/code-server.log!"\n  $CODE_SERVER "$EXTENSION_ARG" --auth none --port "13337" --app-name "code-server" \u003e "/tmp/code-server.log" 2\u003e\u00261 \u0026\n}\n\n# Check if the settings file exists...\nif [ ! -f ~/.local/share/code-server/User/settings.json ]; then\n  echo "⚙️ Creating settings file..."\n  mkdir -p ~/.local/share/code-server/User\n  if command -v jq \u0026\u003e /dev/null; then\n    echo "{}" | jq \'.\' \u003e ~/.local/share/code-server/User/settings.json\n  else\n    echo "{}" \u003e ~/.local/share/code-server/User/settings.json\n  fi\nfi\n\n# Apply/overwrite template based settings\necho "⚙️ Creating machine settings file..."\nmkdir -p ~/.local/share/code-server/Machine\nif command -v jq \u0026\u003e /dev/null; then\n  echo "{}" | jq \'.\' \u003e ~/.local/share/code-server/Machine/settings.json\nelse\n  echo "{}" \u003e ~/.local/share/code-server/Machine/settings.json\nfi\n\n# Check if code-server is already installed for offline\nif [ "false" = true ]; then\n  if [ -f "$CODE_SERVER" ]; then\n    echo "🥳 Found a copy of code-server"\n    run_code_server\n    exit 0\n  fi\n  # Offline mode always expects a copy of code-server to be present\n  echo "Failed to find a copy of code-server"\n  exit 1\nfi\n\n# If there is no cached install OR we don\'t want to use a cached install\nif [ ! -f "$CODE_SERVER" ] || [ "false" != true ]; then\n  printf "${BOLD}Installing code-server!\\n"\n\n  # Clean up from other install (in case install prefix changed).\n  if [ -n "$CODER_SCRIPT_BIN_DIR" ] \u0026\u0026 [ -e "$CODER_SCRIPT_BIN_DIR/code-server" ]; then\n    rm "$CODER_SCRIPT_BIN_DIR/code-server"\n  fi\n\n  ARGS=(\n    "--method=standalone"\n    "--prefix=/tmp/code-server"\n  )\n  if [ -n "" ]; then\n    ARGS+=("--version=")\n  fi\n\n  output=$(curl -fsSL https://code-server.dev/install.sh | sh -s -- "${ARGS[@]}")\n  if [ $? -ne 0 ]; then\n    echo "Failed to install code-server: $output"\n    exit 1\n  fi\n  printf "🥳 code-server has been installed in /tmp/code-server\\n\\n"\nfi\n\n# Make the code-server available in PATH.\nif [ -n "$CODER_SCRIPT_BIN_DIR" ] \u0026\u0026 [ ! -e "$CODER_SCRIPT_BIN_DIR/code-server" ]; then\n  ln -s "$CODE_SERVER" "$CODER_SCRIPT_BIN_DIR/code-server"\nfi\n\n# Get the list of installed extensions...\nLIST_EXTENSIONS=$($CODE_SERVER --list-extensions $EXTENSION_ARG)\nreadarray -t EXTENSIONS_ARRAY \u003c\u003c\u003c "$LIST_EXTENSIONS"\nfunction extension_installed() {\n  if [ "false" != true ]; then\n    return 1\n  fi\n  for _extension in "${EXTENSIONS_ARRAY[@]}"; do\n    if [ "$_extension" == "$1" ]; then\n      echo "Extension $1 was already installed."\n      return 0\n    fi\n  done\n  return 1\n}\n\n# Install each extension...\nIFS=\',\' read -r -a EXTENSIONLIST \u003c\u003c\u003c "${EXTENSIONS}"\nfor extension in "${EXTENSIONLIST[@]}"; do\n  if [ -z "$extension" ]; then\n    continue\n  fi\n  if extension_installed "$extension"; then\n    continue\n  fi\n  printf "🧩 Installing extension ${CODE}$extension${RESET}...\\n"\n  output=$($CODE_SERVER "$EXTENSION_ARG" --force --install-extension "$extension")\n  if [ $? -ne 0 ]; then\n    echo "Failed to install extension: $extension: $output"\n    exit 1\n  fi\ndone\n\nif [ "false" = true ]; then\n  if ! command -v jq \u003e /dev/null; then\n    echo "jq is required to install extensions from a workspace file."\n    exit 0\n  fi\n\n  WORKSPACE_DIR="$HOME"\n  if [ -n "" ]; then\n    WORKSPACE_DIR=""\n  fi\n\n  if [ -f "$WORKSPACE_DIR/.vscode/extensions.json" ]; then\n    printf "🧩 Installing extensions from %s/.vscode/extensions.json...\\n" "$WORKSPACE_DIR"\n    # Use sed to remove single-line comments before parsing with jq\n    extensions=$(sed \'s|//.*||g\' "$WORKSPACE_DIR"/.vscode/extensions.json | jq -r \'.recommendations[]\')\n    for extension in $extensions; do\n      if extension_installed "$extension"; then\n        continue\n      fi\n      $CODE_SERVER "$EXTENSION_ARG" --force --install-extension "$extension"\n    done\n  fi\nfi\n\nrun_code_server\n',
                            cron: '',
                            run_on_start: true,
                            run_on_stop: false,
                            start_blocks_login: false,
                            timeout: 0,
                            display_name: 'code-server',
                          },
                        ],
                        startup_script_behavior: 'non-blocking',
                      },
                    ],
                    daily_cost: 0,
                  },
                  {
                    id: '1',
                    created_at: '2025-09-14T12:51:46.983908+02:00',
                    job_id: '1',
                    workspace_transition: 'start',
                    type: 'docker_volume',
                    name: 'home_volume',
                    hide: false,
                    icon: '',
                    daily_cost: 0,
                  },
                ],
                deadline: '2025-09-15T12:51:46.971419+02:00',
                max_deadline: '2025-09-21T02:00:00+02:00',
                status: 'running',
                daily_cost: 0,
                matched_provisioners: {
                  count: 0,
                  available: 0,
                  most_recently_seen: null,
                },
                template_version_preset_id: null,
                has_ai_task: false,
                has_external_agent: false,
              },
              latest_app_status: null,
              outdated: false,
              name: 'Docker',
              ttl_ms: 86400000,
              last_used_at: '2025-09-14T13:42:08.809235+02:00',
              deleting_at: null,
              dormant_at: null,
              health: {
                healthy: true,
                failing_agents: [],
              },
              automatic_updates: 'never',
              allow_renames: false,
              favorite: false,
              next_start_at: null,
              is_prebuild: false,
            },
          ],
          count: 1,
        }),
      ),
  ),
];
